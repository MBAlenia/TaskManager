events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Log format with more details
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      '"$upstream_status" "$upstream_addr"';

    access_log  /var/log/nginx/access.log  main;
    error_log   /var/log/nginx/error.log;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout  65;
    types_hash_max_size 2048;

    # Server block - Define our own server configuration
    server {
        listen       80;
        server_name  _;  # Catch-all server name to avoid conflicts

        # Test endpoint to echo request details (placed before other locations)
        location = /test {
            add_header Content-Type text/plain;
            return 200 "Test endpoint reached\nRequest method: $request_method\nRequest body: $request_body\n";
        }

        # Proxy API requests to the backend
        location /api/ {
            proxy_pass http://backend:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_redirect off;
            
            # Ensure request body is properly forwarded
            proxy_pass_request_body on;
            proxy_pass_request_headers on;
            
            # Add debugging headers
            proxy_intercept_errors on;
        }

        # Serve static files (this should be last)
        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            try_files $uri $uri/ /index.html;
        }

        # Error pages
        error_page  404              /404.html;
        location = /404.html {
            internal;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            internal;
        }
    }
}