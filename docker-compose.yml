services:
  # PostgreSQL Database
  db:
    image: postgres:13
    container_name: taskquest_db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: taskquest
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - taskquest_network

  # pgAdmin - Database Management Tool
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: taskquest_pgadmin
    restart: always
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@taskquest.com
      PGADMIN_DEFAULT_PASSWORD: adminpassword
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - db
    networks:
      - taskquest_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: taskquest_backend
    restart: always
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: taskquest
      DB_USER: postgres
      DB_PASSWORD: password
      JWT_SECRET: mysecretkey
      BACKEND_URL: http://localhost:3000
    depends_on:
      - db
    networks:
      - taskquest_network

  # Frontend Application
  frontend:
    build:
      context: ./app
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=/api
    container_name: taskquest_frontend
    restart: always
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - taskquest_network

# Volumes for persistent data
volumes:
  postgres_data:
  pgadmin_data:

# Networks for service communication
networks:
  taskquest_network:
    driver: bridge